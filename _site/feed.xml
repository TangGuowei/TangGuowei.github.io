<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>A blog about TangGuowei</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 20 Mar 2016 03:09:16 +0800</pubDate>
    <lastBuildDate>Sun, 20 Mar 2016 03:09:16 +0800</lastBuildDate>
    <generator>Jekyll v3.1.0</generator>
    
      <item>
        <title>设计模式笔记-1</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;简单工厂模式&lt;/h1&gt; &lt;hr /&gt; &lt;h2 id=&quot;section-1&quot;&gt;1. 由来场景:&lt;/h2&gt; &lt;p&gt;界面中可能会有多种Button，有的方的，有的带圆角，有的可能还有其他形状的。如果不同按钮的创建逻辑放在客户端，我们修改按钮样式或者增加按钮，就必须修改客户端代码，耦合较高。 - 客户端实际上只需要理解这个是个按钮，不关心它是什么类型的按钮。 - 如果将这些不同按钮的创建逻辑提取出来，给一个单独的工厂类管理，客户端只需要告诉工厂按钮的类型，工厂类就可以创造相应特征的按钮，然后返回按钮给客户端使用&lt;/p&gt; &lt;h2 id=&quot;section-2&quot;&gt;2. 模型结构:&lt;/h2&gt; &lt;p&gt;&lt;strong&gt;工厂（Factory）&lt;/strong&gt;:负责所有种类的产品创建。根据不同的产品类型创建不同产品，以统一的形式(&lt;strong&gt;Product&lt;/strong&gt;)返回给客户端使用&lt;/p&gt; &lt;p&gt;&lt;strong&gt;抽象产品(Product)&lt;/strong&gt;:客户端理解的可以是接口或者父类形式，提供给客户端需要知道的产品信息，具体产品需要实现该接口或者继承自改父类。&lt;/p&gt; &lt;p&gt;&lt;strong&gt;具体产品&lt;/strong&gt;: 实现抽象产品接口，实际产品可会带上自己的相应业务特性，客户端并不需要知道。&lt;/p&gt; &lt;p&gt;&lt;strong&gt;类图&lt;/strong&gt;: &lt;img src=&quot;https://www.processon.com/chart_image/id/56ed6f07e4b07e023d7d9ede.png&quot; alt=&quot;简单工厂&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;section-3&quot;&gt;3. 伪代码:&lt;/h2&gt; &lt;pre&gt;&lt;code&gt;//抽象产品 @interface Product:NSObject - (void)use; @end //具体产品 @interface ProductA:Product - (void)use; @end @interface ProductA:Product - (void)use; @end //工厂 @implementation Factory + (Product *)productWithType:(Type)type { if(type == ProductA){ return [ProductA new]; }else if(type == ProductB){ return = [ProductB new]; }else{ } } @end //客户端 - (void)configProduct { Product *product = [Factory productWithType:ProductA]; [product use]; } &lt;/code&gt;&lt;/pre&gt; &lt;h2 id=&quot;section-4&quot;&gt;4. 模式优点:&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;将构造产品的业务逻辑分离给单独的工厂类管理，客户端只需要使用产品，不需要负责创建&lt;/li&gt; &lt;li&gt;使用者，只需知道要抽象产品，和产品类型就可以通过工厂创建不同特征的具体产品。不需要记住不同产品的类名。&lt;/li&gt; &lt;li&gt;通过读取配置文件，可以不用带动代码就可以新增和更换产品。增加灵活性&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;section-5&quot;&gt;5. 缺点&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;如果产品过多，工厂类的构造方法复杂度变高，一旦维护者修改出错，可能导致系统不可用&lt;/li&gt; &lt;li&gt;不易与扩展，如果新加入产品种类，有可能需要修改工厂代码&lt;/li&gt; &lt;li&gt;增加类的数目&lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt;...</description>
        <pubDate>Sat, 19 Mar 2016 08:00:00 +0800</pubDate>
        <link>/Objective-C-designPattern1/</link>
        <guid isPermaLink="true">/Objective-C-designPattern1/</guid>
        
        <category>设计模式</category>
        
        <category>架构</category>
        
        <category>iOS</category>
        
        
        <category>框架</category>
        
      </item>
    
      <item>
        <title>终于开始了</title>
        <description>&lt;h4 id=&quot;hello-worldhello-world&quot;&gt;就像每个程序都会以hello world开始，我的博客也以这篇作为hello world为起点。&lt;/h4&gt;
</description>
        <pubDate>Fri, 29 Jan 2016 08:00:00 +0800</pubDate>
        <link>/tom-hello/</link>
        <guid isPermaLink="true">/tom-hello/</guid>
        
        <category>杂</category>
        
        
        <category>无关痛痒</category>
        
      </item>
    
  </channel>
</rss>
